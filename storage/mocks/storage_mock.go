// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	protos_payments "payments_gateway/protos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddPaymentInfo mocks base method.
func (m *MockClient) AddPaymentInfo(ctx context.Context, refID string, request *protos_payments.ProcessPaymentRequest, code protos_payments.Status, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPaymentInfo", ctx, refID, request, code, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPaymentInfo indicates an expected call of AddPaymentInfo.
func (mr *MockClientMockRecorder) AddPaymentInfo(ctx, refID, request, code, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentInfo", reflect.TypeOf((*MockClient)(nil).AddPaymentInfo), ctx, refID, request, code, reason)
}

// GetPaymentInfo mocks base method.
func (m *MockClient) GetPaymentInfo(ctx context.Context, refId string) (*protos_payments.GetPaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentInfo", ctx, refId)
	ret0, _ := ret[0].(*protos_payments.GetPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentInfo indicates an expected call of GetPaymentInfo.
func (mr *MockClientMockRecorder) GetPaymentInfo(ctx, refId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentInfo", reflect.TypeOf((*MockClient)(nil).GetPaymentInfo), ctx, refId)
}
